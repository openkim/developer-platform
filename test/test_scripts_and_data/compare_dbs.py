from montydb import MontyClient,open_repo,MontyDatabase,set_storage
from montydb.utils import montyimport
from excerpts.mongodb import db as test_db
import numpy as np
import sys
import os
np.set_printoptions(threshold=sys.maxsize)

# TODO: more sophisticated checks for these keys
KEYS_TO_SKIP = ["parameter-values","excess","fit-error-max","fit-error-range","relaxed-surface-positions"]

def compare_db_to_reference(reference_json_path: os.PathLike, test_db: MontyDatabase, rtol: float = 0.01, atol: float = 0.01):
    """
    Compare a montydb generated by tests in the KDP to a reference json file.

    Args:
        reference_json_path:
            Path to reference JSON file. This should be produced by `pipeline-database export` in a reference KDP
        test_db:
            Database of the KDP instance being tested
        rtol:
            `numpy.allclose` argument `rtol`
        atol:
            `numpy.allclose` argument `atol`
    """
    set_storage(":memory:", storage="memory",use_bson=True)
    
    if os.path.exists(reference_json_path):
        with open_repo(":memory:"):
            montyimport("db","data",reference_json_path,use_bson=True)
            
    with MontyClient(":memory:") as ref_client:
        ref_db = ref_client.db
    
    ref_db_len = ref_db.data.count_documents(filter={})
    test_db_len = test_db.data.count_documents(filter={})
    assert ref_db_len==test_db_len, "Database lengths are unequal. Ref. database has %d entries, while test has %d"%(ref_db_len,test_db_len)
    
    for i,ref_result in enumerate(ref_db.data.find({})):
        print ("Processing reference result %d of %d"%(i,ref_db_len),end="\r")
        ref_uuid = ref_result["meta"]["uuid"]
        ref_runner_and_subject = "-".join(ref_uuid.split("-")[:-2])        
        ref_instance_id = ref_result["instance-id"]
        for key in ref_result:
            if isinstance(ref_result[key],dict):                
                if ("source-value" in ref_result[key]) and (key not in KEYS_TO_SKIP):
                    # ok, this is a property key, search for this result                    
                    # generic error message
                    error_message_specifying_pair_and_key = "\n\nTest failed while comparing to key '%s' in instance-id %d in reference runner-subject pair %s:\n" \
                        %(key,ref_instance_id,ref_runner_and_subject)               
                        
                    # get numpy array of the source-value from the reference db
                    ref_source_value_array = np.asarray(ref_result[key]["source-value"])
                    
                    # query the test DB
                    query={
                        "meta.uuid":{"$regex":ref_runner_and_subject},
                        "instance-id":ref_instance_id
                    }                    
                    cursor=test_db.data.find(query)

                    # get numpy array of the source-value from the DB we are testing
                    try:
                        test_source_value_array = np.asarray(next(cursor)[key]["source-value"])
                    except StopIteration:
                        assert False, error_message_specifying_pair_and_key+"No matches found in test DB." 
                    except:
                        raise RuntimeError("Unexpected exception when searching test DB")                     
                    
                    # should be only one result, test this
                    try:                        
                        next(cursor)
                        assert False, error_message_specifying_pair_and_key+"Multiple matches found in test DB."                          
                    except StopIteration:
                        pass
                    except:
                        raise RuntimeError("Unexpected exception when searching test DB")
                    
                    # error message segment for displaying the source-values
                    error_message_showing_source_values = "\nMismatch found between reference value\n\n%s\n\nand test value\n\n%s\n\n" % \
                        (ref_source_value_array,test_source_value_array)

                    # arrays should be the same shape                    
                    assert ref_source_value_array.shape == test_source_value_array.shape, \
                        error_message_specifying_pair_and_key + error_message_showing_source_values + "Arrays are different shapes."
                                            
                    if np.issubdtype(ref_source_value_array.dtype,np.number):
                        assert np.allclose(ref_source_value_array,test_source_value_array,rtol=rtol,atol=atol),\
                            error_message_specifying_pair_and_key + error_message_showing_source_values + \
                                "Numerical values are not within the requested fractional tolerance."
                                
if __name__=='__main__':    
    reference_json_file = sys.argv[1]+".json"
    compare_db_to_reference(reference_json_file,test_db)
    print("SUCCESS! All results provided in reference database were successfully matched.")